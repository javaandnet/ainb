{"version":3,"file":"recorder.js","mappings":"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","sources":["webpack://js-audio-recorder/webpack/universalModuleDefinition","webpack://js-audio-recorder/./src/download/download.ts","webpack://js-audio-recorder/./src/exception/exception.ts","webpack://js-audio-recorder/./src/index.ts","webpack://js-audio-recorder/./src/player/player.ts","webpack://js-audio-recorder/./src/recorder/recorder.ts","webpack://js-audio-recorder/./src/transform/transform.ts","webpack://js-audio-recorder/webpack/bootstrap","webpack://js-audio-recorder/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Recorder\"] = factory();\n\telse\n\t\troot[\"Recorder\"] = factory();\n})(this, () => {\nreturn ","/**\n * 下载录音文件\n * @private\n * @param {*} blob      blob数据\n * @param {string} name 下载的文件名\n * @param {string} type 下载的文件后缀\n */\nfunction _download(blob, name: string, type: string): void {\n    let oA = document.createElement('a');\n\n    oA.href = window.URL.createObjectURL(blob);\n    oA.download = `${ name }.${ type }`;\n    oA.click();\n}\n\n/**\n * 下载录音的wav数据\n *\n * @param {blob}   需要下载的blob数据类型\n * @param {string} [name='recorder']    重命名的名字\n */\nexport function downloadWAV(wavblob, name: string = 'recorder'): void {\n    _download(wavblob, name, 'wav');\n}\n\n/**\n * 下载录音pcm数据\n *\n * @param {blob}   需要下载的blob数据类型\n * @param {string} [name='recorder']    重命名的名字\n * @memberof Recorder\n */\nexport function downloadPCM(pcmBlob, name: string = 'recorder'): void {\n    _download(pcmBlob, name, 'pcm');\n}\n\n// 通用下载接口\nexport function download(blob, name: string, type: string) {\n    return _download(blob, name, type)\n}\n","/**\n * 异常处理\n * @static\n * @param {*} message   错误消息\n */\nexport function throwError(message: string) {\n    throw new Error(message);\n}\n","import { downloadPCM, downloadWAV, download } from './download/download';\nimport { compress, encodePCM, encodeWAV } from './transform/transform';\nimport Player from './player/player';\nimport Recorder from './recorder/recorder';\n\ndeclare let window: any;\ndeclare let Math: any;\ndeclare let navigator: any;\ndeclare let Promise: any;\n\n// 构造函数参数格式\ninterface recorderConfig {\n    sampleBits?: number,        // 采样位数\n    sampleRate?: number,        // 采样率\n    numChannels?: number,       // 声道数\n    compiling?: boolean,        // 是否边录边播\n}\n\nclass Index extends Recorder {\n    private isrecording: boolean = false;       // 是否正在录音\n    private ispause: boolean = false;           // 是否是暂停\n    private isplaying: boolean = false;         // 是否正在播放\n\n    public onplay: () => void;                  // 音频播放回调\n    public onpauseplay: () => void;             // 音频暂停回调\n    public onresumeplay: () => void;            // 音频恢复播放回调\n    public onstopplay: () => void;              // 音频停止播放回调\n    public onplayend: () => void;               // 音频正常播放结束\n    /**\n     * @param {Object} options 包含以下三个参数：\n     * sampleBits，采样位数，一般8,16，默认16\n     * sampleRate，采样率，一般 11025、16000、22050、24000、44100、48000，默认为浏览器自带的采样率\n     * numChannels，声道，1或2\n     */\n    constructor(options: recorderConfig = {}) {\n        super(options);\n    }\n\n    /**\n     * 重新修改配置\n     *\n     * @param {recorderConfig} [options={}]\n     * @memberof Recorder\n     */\n    public setOption(options: recorderConfig = {}) {\n        this.setNewOption(options);\n    }\n\n    /**\n     * Start the recording\n     */\n    start(): Promise<{}> {\n        if (this.isrecording) {\n            // 正在录音，则不允许\n            return Promise.reject();\n        }\n\n        this.isrecording = true;\n\n        return this.startRecord();\n    }\n\n    /**\n     * Pause the recording\n     */\n    pause(): void {\n        if (this.isrecording && !this.ispause) {\n            this.ispause = true;\n            // 当前不暂停的时候才可以暂停\n            this.pauseRecord();\n        }\n    }\n\n    /**\n     * 继续录音\n     */\n    resume(): void {\n        if (this.isrecording && this.ispause) {\n            this.ispause = false;\n            this.resumeRecord();\n        }\n    }\n\n    /**\n     * 停止录音\n     *\n     * @memberof Recorder\n     */\n    stop(): void {\n        if (this.isrecording) {\n            this.isrecording = false;\n            this.ispause = false;\n            this.stopRecord();\n        }\n    }\n\n    /**\n     * 播放录音\n     */\n    play(): void {\n        this.stop();\n        // 关闭前一次音频播放\n        this.isplaying = true;\n\n        this.onplay && this.onplay();\n        Player.addPlayEnd(this.onplayend);  // 注册播放完成后的回调事件\n\n        const dataV = this.getWAV();\n\n        if (dataV.byteLength > 44) {\n            Player.play(dataV.buffer);  // 播放\n        }\n    }\n\n    /**\n     * 获取已经播放了多长时间\n     */\n    getPlayTime(): number {\n        return Player.getPlayTime();\n    }\n\n    /**\n     * 暂停播放录音\n     *\n     * @memberof Recorder\n     */\n    pausePlay(): void {\n        if (this.isrecording || !this.isplaying) {\n            // 正在录音或没有播放，暂停无效\n            return;\n        }\n\n        this.isplaying = false;\n        this.onpauseplay && this.onpauseplay();\n        Player.pausePlay();\n    }\n\n    /**\n     * 恢复播放录音\n     *\n     * @memberof Recorder\n     */\n    resumePlay(): void {\n        if (this.isrecording || this.isplaying) {\n            // 正在录音或已经播放或没开始播放，恢复无效\n            return;\n        }\n\n        this.isplaying = true;\n        this.onresumeplay && this.onresumeplay();\n        Player.resumePlay();\n    }\n\n    /**\n     * 停止播放\n     *\n     * @memberof Recorder\n     */\n    stopPlay(): void {\n        if (this.isrecording) {\n            // 正在录音，停止录音播放无效\n            return;\n        }\n\n        this.isplaying = false;\n        this.onstopplay && this.onstopplay();\n        Player.stopPlay();\n    }\n\n    destroy(): Promise<{}> {\n        Player.destroyPlay();\n\n        return this.destroyRecord();\n    }\n\n    /**\n     * 获取当前已经录音的PCM音频数据\n     *\n     * @returns[DataView]\n     * @memberof Recorder\n     */\n    // getWholeData() {\n    //     return this.tempPCM;\n    // }\n\n    /**\n     * 获取余下的新数据，不包括 getNextData 前一次获取的数据\n     *\n     * @returns [DataView]\n     * @memberof Recorder\n     */\n    // getNextData() {\n    //     let length = this.tempPCM.length,\n    //         data = this.tempPCM.slice(this.offset);\n\n    //     this.offset = length;\n\n    //     return data;\n    // }\n\n    /**\n     * 获取当前录音的波形数据，\n     * 调取频率由外部控制。\n     *\n     * @memberof Recorder\n     */\n    getRecordAnalyseData(): any {\n        return this.getAnalyseData();\n    }\n\n    /**\n     * 获取录音播放时的波形数据，\n     *\n     * @memberof Recorder\n     */\n    getPlayAnalyseData(): any {\n        // 现在录音和播放不允许同时进行，所有复用的录音的analyser节点。\n        return Player.getAnalyseData();\n    }\n\n    getPCM(): any {\n        // 先停止\n        this.stop();\n        // 获取pcm数据\n        let data: any = this.getData();\n        // 根据输入输出比例 压缩或扩展\n        data = compress(data, this.inputSampleRate, this.outputSampleRate);\n        // 按采样位数重新编码\n        return encodePCM(data, this.oututSampleBits, this.littleEdian);\n    }\n\n    /**\n     * 获取PCM格式的blob数据\n     *\n     * @returns { blob }  PCM格式的blob数据\n     * @memberof Recorder\n     */\n    getPCMBlob(): any {\n        return new Blob([ this.getPCM() ]);\n    }\n\n    /**\n     * 下载录音pcm数据\n     *\n     * @param {string} [name='recorder']    重命名的名字\n     * @memberof Recorder\n     */\n    downloadPCM(name: string = 'recorder'): void {\n        let pcmBlob = this.getPCMBlob();\n\n        downloadPCM(pcmBlob, name);\n    }\n\n    /**\n     * 获取WAV编码的二进制数据(dataview)\n     *\n     * @returns {dataview}  WAV编码的二进制数据\n     * @memberof Recorder\n     */\n    getWAV(): any {\n        let pcmTemp = this.getPCM();\n\n        // PCM增加44字节的头就是WAV格式了\n        return encodeWAV(pcmTemp, this.inputSampleRate,\n            this.outputSampleRate, this.config.numChannels, this.oututSampleBits, this.littleEdian);;\n    }\n\n    /**\n     * 获取WAV音频的blob数据\n     *\n     * @returns { blob }    wav格式blob数据\n     * @memberof Recorder\n     */\n    getWAVBlob(): any {\n        return new Blob([ this.getWAV() ], { type: 'audio/wav' });\n    }\n\n    /**\n     * 下载录音的wav数据\n     *\n     * @param {string} [name='recorder']    重命名的名字\n     * @memberof Recorder\n     */\n    downloadWAV(name: string = 'recorder'): void {\n        let wavBlob = this.getWAVBlob();\n\n        downloadWAV(wavBlob, name);\n    }\n\n    /**\n     * 通用的下载接口\n     */\n    download(blob, name: string, type: string): void {\n        download(blob, name, type);\n    }\n\n    /**\n     * 获取左和右声道的数据\n     *\n     * @returns [DataView]\n     */\n    getChannelData(): any {\n        const all = this.getPCM();\n        const length = all.byteLength;\n        const littleEdian = this.littleEdian\n        const res = { left: null, right: null }\n\n        if (this.config.numChannels === 2) {\n            // 双通道,劈开\n            const lD = new DataView(new ArrayBuffer(length / 2))\n            const rD = new DataView(new ArrayBuffer(length / 2))\n            // 双声道，需要拆分下数据\n\n            if (this.config.sampleBits === 16) {\n                for (var i = 0; i < length / 2; i += 2) {\n                    lD.setInt16(i, all.getInt16(i * 2, littleEdian), littleEdian)\n                    rD.setInt16(i, all.getInt16(i * 2 + 2, littleEdian), littleEdian)\n                }\n            } else {\n                for (var i = 0; i < length / 2; i += 2) {\n                    lD.setInt8(i, all.getInt8(i * 2))\n                    rD.setInt8(i, all.getInt8(i * 2 + 1))\n                }\n            }\n\n            res.left = lD\n            res.right = rD\n        } else {\n            // 单通道\n            res.left = all\n        }\n\n        return res\n    }\n}\n\nexport default Index;\n","import { throwError } from '../exception/exception'\n\ndeclare let window: any;\n\nlet source: any = null;\nlet playTime: number = 0;       // 相对时间，记录暂停位置\nlet playStamp: number = 0;      // 开始或暂停后开始的时间戳(绝对)\nlet context: any = null;\nlet analyser: any = null;\n\nlet audioData: any = null;\n// let hasInit: boolean = false;           // 是否已经初始化了\nlet isPaused: boolean = false;\nlet totalTime: number = 0;\nlet endplayFn: any = function() {};\n\n/**\n * 初始化\n */\nfunction init(): void {\n    context = new (window.AudioContext || window.webkitAudioContext)();\n    analyser = context.createAnalyser();\n    analyser.fftSize = 2048;                   // 表示存储频域的大小\n}\n\n/**\n * play\n * @returns {Promise<{}>}\n */\nfunction playAudio(): Promise<{}> {\n    isPaused = false;\n\n    return context.decodeAudioData(audioData.slice(0), buffer => {\n        source = context.createBufferSource();\n\n        // 播放结束的事件绑定\n        source.onended = () => {\n            if (!isPaused) {  // 暂停的时候也会触发该事件\n                // 计算音频总时长\n                totalTime = context.currentTime - playStamp + playTime;\n                endplayFn();\n            }\n\n        }\n\n        // 设置数据\n        source.buffer = buffer;\n        // connect到分析器，还是用录音的，因为播放时不能录音的\n        source.connect(analyser);\n        analyser.connect(context.destination);\n        source.start(0, playTime);\n\n        // 记录当前的时间戳，以备暂停时使用\n        playStamp = context.currentTime;\n    }, function(e) {\n        throwError(e);\n    });\n}\n\n// 销毁source, 由于 decodeAudioData 产生的source每次停止后就不能使用，所以暂停也意味着销毁，下次需重新启动。\nfunction destroySource() {\n    if (source) {\n        source.stop();\n        source = null;\n    }\n}\n\nexport default class Player {\n    /**\n     * play record\n     * @static\n     * @param {ArrayBuffer} arraybuffer\n     * @memberof Player\n     */\n    static play(arraybuffer): Promise<{}> {\n        if (!context) {\n            // 第一次播放要初始化\n            init();\n        }\n        this.stopPlay();\n        // 缓存播放数据\n        audioData = arraybuffer;\n        totalTime = 0;\n\n        return playAudio();\n    }\n\n    /**\n     * 暂停播放录音\n     * @memberof Player\n     */\n    static pausePlay(): void {\n        destroySource();\n        // 多次暂停需要累加\n        playTime += context.currentTime - playStamp;\n        isPaused = true;\n    }\n\n    /**\n     * 恢复播放录音\n     * @memberof Player\n     */\n    static resumePlay(): Promise<{}> {\n        return playAudio();\n    }\n\n    /**\n     * 停止播放\n     * @memberof Player\n     */\n    static stopPlay() {\n        playTime = 0;\n        audioData = null;\n\n        destroySource();\n    }\n\n    static destroyPlay() {\n        this.stopPlay();\n    }\n\n    static getAnalyseData() {\n        let dataArray = new Uint8Array(analyser.frequencyBinCount);\n        // 将数据拷贝到dataArray中。\n        analyser.getByteTimeDomainData(dataArray);\n\n        return dataArray;\n    }\n\n    /**\n     * 增加录音播放完成的事件绑定\n     *\n     * @static\n     * @param {*} [fn=function() {}]\n     * @memberof Player\n     */\n    static addPlayEnd(fn: any = function() {}) {\n        endplayFn = fn;\n    }\n\n    // 获取已经播放的时长\n    static getPlayTime(): number {\n        let pTime = isPaused ? playTime : context.currentTime - playStamp + playTime;\n\n        return totalTime || pTime;\n    }\n}\n","import { compress, encodePCM, encodeWAV } from '../transform/transform';\n\ndeclare let window: any;\ndeclare let Math: any;\ndeclare let navigator: any;\ndeclare let Promise: any;\n\n// 构造函数参数格式\ninterface recorderConfig {\n    sampleBits?: number,        // 采样位数\n    sampleRate?: number,        // 采样率\n    numChannels?: number,       // 声道数\n    compiling?: boolean,        // 是否边录边播\n}\n\nexport default class Recorder {\n    private context: any;\n    protected config: recorderConfig;               // 配置\n    private analyser: any;\n    private size: number = 0;                       // 录音文件总长度\n    private lBuffer: Array<Float32Array> = [];      // pcm音频数据搜集器(左声道)\n    private rBuffer: Array<Float32Array> = [];      // pcm音频数据搜集器(右声道)\n    private PCM: any;                               // 最终的PCM数据缓存，避免多次encode\n    private tempPCM: Array<DataView> = [];          // 边录边转时临时存放pcm的\n    private audioInput: any;\n    protected inputSampleRate: number;              // 输入采样率\n    protected inputSampleBits: number = 16;         // 输入采样位数\n    protected outputSampleRate: number;             // 输出采样率\n    protected oututSampleBits: number;              // 输出采样位数\n    private source: any;                            // 音频输入\n    private recorder: any;\n    private stream: any;                            // 流\n    protected littleEdian: boolean;                 // 是否是小端字节序\n    protected fileSize: number = 0;                 // 录音大小，byte为单位\n    protected duration: number = 0;                 // 录音时长\n    private needRecord: boolean = true;             // 由于safari问题，导致使用该方案代替disconnect/connect方案\n    // 正在录音时间，参数是已经录了多少时间了\n    public onprocess: (duration: number) => void;\n    // onprocess 替代函数，保持原来的 onprocess 向下兼容\n    public onprogress: (payload: {\n        duration: number,\n        fileSize: number,\n        vol: number,\n        data:any\n        // data: Array<DataView>,      // 当前存储的所有录音数据\n    }) => void;\n    public onplay: () => void;                  // 音频播放回调\n    public onpauseplay: () => void;             // 音频暂停回调\n    public onresumeplay: () => void;            // 音频恢复播放回调\n    public onstopplay: () => void;              // 音频停止播放回调\n    public onplayend: () => void;               // 音频正常播放结束\n\n    /**\n     * @param {Object} options 包含以下三个参数：\n     * sampleBits，采样位数，一般8,16，默认16\n     * sampleRate，采样率，一般 11025、16000、22050、24000、44100、48000，默认为浏览器自带的采样率\n     * numChannels，声道，1或2\n     */\n    constructor(options: recorderConfig = {}) {\n        // 临时audioContext，为了获取输入采样率的\n        let context = new (window.AudioContext || window.webkitAudioContext)();\n\n        this.inputSampleRate = context.sampleRate;     // 获取当前输入的采样率\n\n        // 设置输出配置\n        this.setNewOption(options);\n\n        // 判断端字节序\n        this.littleEdian = (function() {\n            let buffer = new ArrayBuffer(2);\n            new DataView(buffer).setInt16(0, 256, true);\n            return new Int16Array(buffer)[0] === 256;\n        })();\n        // 兼容 getUserMedia\n        Recorder.initUserMedia();\n    }\n\n    protected setNewOption(options: recorderConfig = {}) {\n        this.config = {\n            // 采样数位 8, 16\n            sampleBits: ~[8, 16].indexOf(options.sampleBits) ? options.sampleBits : 16,\n            // 采样率\n            sampleRate: ~[8000, 11025, 16000, 22050, 24000, 44100, 48000].indexOf(options.sampleRate) ? options.sampleRate : this.inputSampleRate,\n            // 声道数，1或2\n            numChannels: ~[1, 2].indexOf(options.numChannels) ? options.numChannels : 1,\n            // 是否需要边录边转，默认关闭，后期使用web worker\n            // compiling: !!options.compiling || false,   // 先移除\n        };\n        // 设置采样的参数\n        this.outputSampleRate = this.config.sampleRate;     // 输出采样率\n        this.oututSampleBits = this.config.sampleBits;      // 输出采样数位 8, 16\n    }\n\n    /**\n     * 开始录音\n     *\n     * @returns {Promise<{}>}\n     * @memberof Recorder\n     */\n    startRecord(): Promise<{}> {\n        if (this.context) {\n            // 关闭先前的录音实例，因为前次的实例会缓存少量前次的录音数据\n            this.destroyRecord();\n        }\n        // 初始化\n        this.initRecorder();\n\n        return navigator.mediaDevices.getUserMedia({\n            audio: true\n        }).then(stream => {\n            // audioInput表示音频源节点\n            // stream是通过navigator.getUserMedia获取的外部（如麦克风）stream音频输出，对于这就是输入\n            this.audioInput = this.context.createMediaStreamSource(stream);\n            this.stream = stream;\n        }/* 报错丢给外部使用者catch，后期可在此处增加建议性提示\n            , error => {\n            // 抛出异常\n            Recorder.throwError(error.name + \" : \" + error.message);\n        } */).then(() => {\n            // audioInput 为声音源，连接到处理节点 recorder\n            this.audioInput.connect(this.analyser);\n            this.analyser.connect(this.recorder);\n            // this.audioInput.connect(this.recorder);\n            // 处理节点 recorder 连接到扬声器\n            this.recorder.connect(this.context.destination);\n        });\n    }\n\n    /**\n     * 暂停录音\n     *\n     * @memberof Recorder\n     */\n    pauseRecord(): void {\n        this.needRecord = false;\n    }\n\n    /**\n     * 继续录音\n     *\n     * @memberof Recorder\n     */\n    resumeRecord(): void {\n        this.needRecord = true;\n    }\n\n    /**\n     * 停止录音\n     *\n     */\n    stopRecord(): void {\n        this.audioInput && this.audioInput.disconnect();\n        this.source && this.source.stop();\n        this.recorder.disconnect();\n        this.analyser.disconnect();\n        this.needRecord = true;\n    }\n\n    /**\n     * 销毁录音对象\n     *\n     */\n    destroyRecord(): Promise<{}> {\n        this.clearRecordStatus();\n        // 结束流\n        this.stopStream();\n\n        return this.closeAudioContext();\n    }\n\n    getAnalyseData() {\n        let dataArray = new Uint8Array(this.analyser.frequencyBinCount);\n        // 将数据拷贝到dataArray中。\n        this.analyser.getByteTimeDomainData(dataArray);\n\n        return dataArray;\n    }\n\n    // 获取录音数据\n    getData() {\n        let data: any = this.flat();\n\n        return data;\n    }\n\n    /**\n     * 清除状态\n     *\n     */\n    private clearRecordStatus() {\n        this.lBuffer.length = 0;\n        this.rBuffer.length = 0;\n        this.size = 0;\n        this.fileSize = 0;\n        this.PCM = null;\n        this.audioInput = null;\n        this.duration = 0;\n    }\n\n    /**\n     * 将二维数组转一维\n     *\n     * @private\n     * @returns  {float32array}     音频pcm二进制数据\n     * @memberof Recorder\n     */\n    private flat() {\n        let lData = null,\n            rData = new Float32Array(0);    // 右声道默认为0\n\n        // 创建存放数据的容器\n        if (1 === this.config.numChannels) {\n            lData = new Float32Array(this.size);\n        } else {\n            lData = new Float32Array(this.size / 2);\n            rData = new Float32Array(this.size / 2);\n        }\n        // 合并\n        let offset = 0; // 偏移量计算\n\n        // 将二维数据，转成一维数据\n        // 左声道\n        for (let i = 0; i < this.lBuffer.length; i++) {\n            lData.set(this.lBuffer[i], offset);\n            offset += this.lBuffer[i].length;\n        }\n\n        offset = 0;\n        // 右声道\n        for (let i = 0; i < this.rBuffer.length; i++) {\n            rData.set(this.rBuffer[i], offset);\n            offset += this.rBuffer[i].length;\n        }\n\n        return {\n            left: lData,\n            right: rData\n        };\n    }\n\n    /**\n     * 初始化录音实例\n     */\n    private initRecorder(): void {\n        // 清空数据\n        this.clearRecordStatus();\n\n        this.context = new (window.AudioContext || window.webkitAudioContext)();\n\n        this.analyser = this.context.createAnalyser();  // 录音分析节点\n        this.analyser.fftSize = 2048;                   // 表示存储频域的大小\n\n        // 第一个参数表示收集采样的大小，采集完这么多后会触发 onaudioprocess 接口一次，该值一般为1024,2048,4096等，一般就设置为4096\n        // 第二，三个参数分别是输入的声道数和输出的声道数，保持一致即可。\n        let createScript = this.context.createScriptProcessor || this.context.createJavaScriptNode;\n        this.recorder = createScript.apply(this.context, [4096, this.config.numChannels, this.config.numChannels]);\n\n        // 音频采集\n        this.recorder.onaudioprocess = e => {\n            if (!this.needRecord) {\n                return;\n            }\n            // 左声道数据\n            // getChannelData返回Float32Array类型的pcm数据\n            //Left Channel\n            let lData = e.inputBuffer.getChannelData(0),\n                rData = null,\n                vol = 0;        // 音量百分比\n\n            this.lBuffer.push(new Float32Array(lData));\n\n            this.size += lData.length;\n\n            // 判断是否有右声道数据\n            if (2 === this.config.numChannels) {\n                rData = e.inputBuffer.getChannelData(1);\n                this.rBuffer.push(new Float32Array(rData));\n\n                this.size += rData.length;\n            }\n\n            // 边录边转处理 暂时不支持\n            // if (this.config.compiling) {\n            //     let pcm = this.transformIntoPCM(lData, rData);\n\n            //     this.tempPCM.push(pcm);\n            //     // 计算录音大小\n            //     this.fileSize = pcm.byteLength * this.tempPCM.length;\n            // } else {\n                // 计算录音大小\n                this.fileSize = Math.floor(this.size / Math.max( this.inputSampleRate / this.outputSampleRate, 1))\n                    * (this.oututSampleBits / 8)\n            // }\n            // 为何此处计算大小需要分开计算。原因是先录后转时，是将所有数据一起处理，边录边转是单个 4096 处理，\n            // 有小数位的偏差。\n\n            // 计算音量百分比\n            vol = Math.max.apply(Math, lData) * 100;\n            // 统计录音时长\n            this.duration += 4096 / this.inputSampleRate;\n            // 录音时长回调\n            this.onprocess && this.onprocess(this.duration);\n            // 录音时长及响度回调\n            this.onprogress && this.onprogress({\n                duration: this.duration,\n                fileSize: this.fileSize,\n                vol,\n                data: lData     // 当前所有的pcm数据，调用者控制增量\n            });\n        }\n    }\n\n    /**\n     * 终止流（这可以让浏览器上正在录音的标志消失掉）\n     * @private\n     * @memberof Recorder\n     */\n    private stopStream() {\n        if (this.stream && this.stream.getTracks) {\n            this.stream.getTracks().forEach(track => track.stop());\n            this.stream = null;\n        }\n    }\n\n    /**\n     * close兼容方案\n     * 如firefox 30 等低版本浏览器没有 close方法\n     */\n    private closeAudioContext() {\n        if (this.context && this.context.close && this.context.state !== 'closed') {\n            return this.context.close();\n        } else {\n            return new Promise((resolve) => {\n                resolve();\n            });\n        }\n    }\n\n    // getUserMedia 版本兼容\n    static initUserMedia() {\n        if (navigator.mediaDevices === undefined) {\n            navigator.mediaDevices = {};\n        }\n\n        if (navigator.mediaDevices.getUserMedia === undefined) {\n            navigator.mediaDevices.getUserMedia = function(constraints) {\n                let getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\n\n                if (!getUserMedia) {\n                    return Promise.reject(new Error('浏览器不支持 getUserMedia !'));\n                }\n\n                return new Promise(function(resolve, reject) {\n                    getUserMedia.call(navigator, constraints, resolve, reject);\n                });\n            }\n        }\n    }\n\n    /**\n     * 将获取到到左右声道的Float32Array数据编码转化\n     *\n     * @param {Float32Array} lData  左声道数据\n     * @param {Float32Array} rData  有声道数据\n     * @returns DataView\n     */\n    private transformIntoPCM(lData, rData) {\n        let lBuffer = new Float32Array(lData),\n            rBuffer = new Float32Array(rData);\n\n        let data = compress({\n            left: lBuffer,\n            right: rBuffer,\n        }, this.inputSampleRate, this.outputSampleRate);\n\n        return encodePCM(data, this.oututSampleBits, this.littleEdian);\n    }\n\n    static getPermission(): Promise<{}> {\n        this.initUserMedia();\n\n        return navigator.mediaDevices.getUserMedia({audio: true}).then((stream) => {\n            stream && stream.getTracks().forEach(track => track.stop());\n        });\n    }\n}\n","interface dataview {\n    byteLength: number,\n    buffer: {\n        byteLength: number,\n    },\n    getUint8: any,\n}\n\n/**\n * 在data中的offset位置开始写入str字符串\n * @param {TypedArrays} data    二进制数据\n * @param {Number}      offset  偏移量\n * @param {String}      str     字符串\n */\nfunction writeString(data, offset, str): void {\n    for (let i = 0; i < str.length; i++) {\n        data.setUint8(offset + i, str.charCodeAt(i));\n    }\n}\n\n/**\n * 数据合并压缩\n * 根据输入和输出的采样率压缩数据，\n * 比如输入的采样率是48k的，我们需要的是（输出）的是16k的，由于48k与16k是3倍关系，\n * 所以输入数据中每隔3取1位\n *\n * @param {float32array} data       [-1, 1]的pcm数据\n * @param {number} inputSampleRate  输入采样率\n * @param {number} outputSampleRate 输出采样率\n * @returns  {float32array}         压缩处理后的二进制数据\n */\nexport function compress(data, inputSampleRate: number, outputSampleRate: number) {\n    // 压缩，根据采样率进行压缩\n    let rate = inputSampleRate / outputSampleRate,\n        compression = Math.max(rate, 1),\n        lData = data.left,\n        rData = data.right,\n        length = Math.floor(( lData.length + rData.length ) / rate),\n        result = new Float32Array(length),\n        index = 0,\n        j = 0;\n\n    // 循环间隔 compression 位取一位数据\n    while (index < length) {\n        // 取整是因为存在比例compression不是整数的情况\n        let temp = Math.floor(j);\n\n        result[index] = lData[temp];\n        index++;\n\n        if (rData.length) {\n            /*\n            * 双声道处理\n            * e.inputBuffer.getChannelData(0)得到了左声道4096个样本数据，1是右声道的数据，\n            * 此处需要组和成LRLRLR这种格式，才能正常播放，所以要处理下\n            */\n            result[index] = rData[temp];\n            index++;\n        }\n\n        j += compression;\n    }\n    // 返回压缩后的一维数据\n    return result;\n}\n\n/**\n * 转换到我们需要的对应格式的编码\n *\n * @param {float32array} bytes      pcm二进制数据\n * @param {number}  sampleBits      采样位数\n * @param {boolean} littleEdian     是否是小端字节序\n * @returns {dataview}              pcm二进制数据\n */\nexport function encodePCM(bytes, sampleBits: number, littleEdian: boolean = true) {\n    let offset = 0,\n        dataLength = bytes.length * (sampleBits / 8),\n        buffer = new ArrayBuffer(dataLength),\n        data = new DataView(buffer);\n\n    // 写入采样数据\n    if (sampleBits === 8) {\n        for (let i = 0; i < bytes.length; i++, offset++) {\n            // 范围[-1, 1]\n            let s = Math.max(-1, Math.min(1, bytes[i]));\n            // 8位采样位划分成2^8=256份，它的范围是0-255;\n            // 对于8位的话，负数*128，正数*127，然后整体向上平移128(+128)，即可得到[0,255]范围的数据。\n            let val = s < 0 ? s * 128 : s * 127;\n            val = +val + 128;\n            data.setInt8(offset, val);\n        }\n    } else {\n        for (let i = 0; i < bytes.length; i++, offset += 2) {\n            let s = Math.max(-1, Math.min(1, bytes[i]));\n            // 16位的划分的是2^16=65536份，范围是-32768到32767\n            // 因为我们收集的数据范围在[-1,1]，那么你想转换成16位的话，只需要对负数*32768,对正数*32767,即可得到范围在[-32768,32767]的数据。\n            data.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, littleEdian);\n        }\n    }\n\n    return data;\n}\n\n/**\n * 编码wav，一般wav格式是在pcm文件前增加44个字节的文件头，\n * 所以，此处只需要在pcm数据前增加下就行了。\n *\n * @param {DataView} bytes           pcm二进制数据\n * @param {number}  inputSampleRate  输入采样率\n * @param {number}  outputSampleRate 输出采样率\n * @param {number}  numChannels      声道数\n * @param {number}  oututSampleBits  输出采样位数\n * @param {boolean} littleEdian      是否是小端字节序\n * @returns {DataView}               wav二进制数据\n */\nexport function encodeWAV(bytes: dataview, inputSampleRate: number, outputSampleRate: number, numChannels: number, oututSampleBits: number, littleEdian: boolean = true) {\n    let sampleRate = outputSampleRate > inputSampleRate ? inputSampleRate : outputSampleRate,   // 输出采样率较大时，仍使用输入的值，\n        sampleBits = oututSampleBits,\n        buffer = new ArrayBuffer(44 + bytes.byteLength),\n        data = new DataView(buffer),\n        channelCount = numChannels, // 声道\n        offset = 0;\n\n    // 资源交换文件标识符\n    writeString(data, offset, 'RIFF'); offset += 4;\n    // 下个地址开始到文件尾总字节数,即文件大小-8\n    data.setUint32(offset, 36 + bytes.byteLength, littleEdian); offset += 4;\n    // WAV文件标志\n    writeString(data, offset, 'WAVE'); offset += 4;\n    // 波形格式标志\n    writeString(data, offset, 'fmt '); offset += 4;\n    // 过滤字节,一般为 0x10 = 16\n    data.setUint32(offset, 16, littleEdian); offset += 4;\n    // 格式类别 (PCM形式采样数据)\n    data.setUint16(offset, 1, littleEdian); offset += 2;\n    // 声道数\n    data.setUint16(offset, channelCount, littleEdian); offset += 2;\n    // 采样率,每秒样本数,表示每个通道的播放速度\n    data.setUint32(offset, sampleRate, littleEdian); offset += 4;\n    // 波形数据传输率 (每秒平均字节数) 声道数 × 采样频率 × 采样位数 / 8\n    data.setUint32(offset, channelCount * sampleRate * (sampleBits / 8), littleEdian); offset += 4;\n    // 快数据调整数 采样一次占用字节数 声道数 × 采样位数 / 8\n    data.setUint16(offset, channelCount * (sampleBits / 8), littleEdian); offset += 2;\n    // 采样位数\n    data.setUint16(offset, sampleBits, littleEdian); offset += 2;\n    // 数据标识符\n    writeString(data, offset, 'data'); offset += 4;\n    // 采样数据总数,即数据总大小-44\n    data.setUint32(offset, bytes.byteLength, littleEdian); offset += 4;\n\n    // 给wav头增加pcm体\n    for (let i = 0; i < bytes.byteLength;) {\n        data.setUint8(offset, bytes.getUint8(i));\n        offset++;\n        i++;\n    }\n\n    return data;\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(156);\n"],"names":["root","factory","exports","module","define","amd","this","_download","blob","name","type","oA","document","createElement","href","window","URL","createObjectURL","download","click","wavblob","pcmBlob","message","Error","options","isrecording","ispause","isplaying","setOption","setNewOption","start","Promise","reject","startRecord","pause","pauseRecord","resume","resumeRecord","stop","stopRecord","play","onplay","addPlayEnd","onplayend","dataV","getWAV","byteLength","buffer","getPlayTime","pausePlay","onpauseplay","resumePlay","onresumeplay","stopPlay","onstopplay","destroy","destroyPlay","destroyRecord","getRecordAnalyseData","getAnalyseData","getPlayAnalyseData","getPCM","data","getData","compress","inputSampleRate","outputSampleRate","encodePCM","oututSampleBits","littleEdian","getPCMBlob","Blob","downloadPCM","pcmTemp","encodeWAV","config","numChannels","getWAVBlob","downloadWAV","wavBlob","getChannelData","all","length","res","left","right","lD","DataView","ArrayBuffer","rD","sampleBits","i","setInt16","getInt16","setInt8","getInt8","Index","source","playTime","playStamp","context","analyser","audioData","isPaused","totalTime","endplayFn","playAudio","decodeAudioData","slice","createBufferSource","onended","currentTime","connect","destination","e","throwError","destroySource","arraybuffer","AudioContext","webkitAudioContext","createAnalyser","fftSize","dataArray","Uint8Array","frequencyBinCount","getByteTimeDomainData","fn","pTime","size","lBuffer","rBuffer","tempPCM","inputSampleBits","fileSize","duration","needRecord","sampleRate","Int16Array","Recorder","initUserMedia","indexOf","initRecorder","navigator","mediaDevices","getUserMedia","audio","then","stream","audioInput","createMediaStreamSource","recorder","disconnect","clearRecordStatus","stopStream","closeAudioContext","flat","PCM","lData","rData","Float32Array","offset","set","createScript","createScriptProcessor","createJavaScriptNode","apply","onaudioprocess","vol","inputBuffer","push","Math","floor","max","onprocess","onprogress","getTracks","forEach","track","close","state","resolve","undefined","constraints","webkitGetUserMedia","mozGetUserMedia","call","transformIntoPCM","getPermission","writeString","str","setUint8","charCodeAt","rate","compression","result","index","j","temp","bytes","dataLength","val","s","min","channelCount","setUint32","setUint16","getUint8","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"sourceRoot":""}